name: Code Quality Check Feature

on:
  # to fix comment : Runs on pull request targeting any branch except the default branch main
  pull_request:
    types: [ opened, synchronize, reopened]
  push:
    branches: [ feature/*, feat/*, fix/* ]
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

env:
  FLY_API_TOKEN: ${{ secrets.SPRING_BOOT_ASYNCHRONOUS_API_FLY_API_TOKEN }}

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow one concurrent deployment
concurrency:
  group: "pages"
  cancel-in-progress: true


jobs:
  loading_test:
    name: Loading Test
    environment:
      name: prep-loading-report
      # needs: non_regression_test
      url: ${{ steps.deployment.outputs.page_url }}gatling-summary-${{ github.event.pull_request.number }}.html
    runs-on: ubuntu-latest
    steps:
#      # Checkout the code from the repository
      - name: Checkout
        uses: actions/checkout@v3

      # Execute Gatling Test Suite
      - name: Execute Gatling Test Suite
        continue-on-error: true
        run: |
          mvn clean gatling:test --f loading/pom.xml


      # New step to generate gatling-summary.html
      - name: Generate gatling-summary HTML
        run: |
          # Read the contents of lastRun.txt and store it in a variable
          last_runs=$(cat loading/target/gatling/lastRun.txt | sort -n)

          # Create a template for gatling-summary.html
          cat <<EOF > loading/target/gatling/gatling-summary.html
          <!DOCTYPE html>
          <html>
          <head>
            <title>Gatling Reports</title>
          </head>
          <body>
            <h1>Gatling Reports</h1>
            <ul>
          EOF

          # Loop through the directories obtained from lastRun.txt
          IFS=$'\n'
          for run in $last_runs; do
          # Add a list item with a link to each report directory
          # Extraction du nom et de la date à partir de l'entrée
            input=$run
            report_name="${input%-*}"  # Supprime tout après le dernier tiret (-)
            timestamp="${input#*-}"    # Supprime tout avant le premier tiret (-)
            year="${timestamp:0:4}"
            month="${timestamp:4:2}"
            day="${timestamp:6:2}"
            hour="${timestamp:8:2}"
            minute="${timestamp:10:2}"
            second="${timestamp:12:2}"
            
            formatted_date="${year}-${month}-${day} ${hour}:${minute}:${second}"
            
            # Construction de la sortie souhaitée
           echo "            <li>Results for <a href='./$run/index.html'>$report_name</a> at $formatted_date</li>" >> loading/target/gatling/gatling-summary.html
          done

          # Close the HTML tags
          echo "            </ul>" >> loading/target/gatling/gatling-summary.html
          echo "          </body>" >> loading/target/gatling/gatling-summary.html
          echo "</html>" >> loading/target/gatling/gatling-summary.html

          # Display the generated gatling-summary.html file (optional)
          cat loading/target/gatling/gatling-summary.html

          mkdir -p doc-${{ github.event.pull_request.number }}
          mv ./loading/target/gatling/* ./doc-${{ github.event.pull_request.number }}
          mv ./doc-${{ github.event.pull_request.number }}/gatling-summary.html ./doc-${{ github.event.pull_request.number }}/gatling-summary-${{ github.event.pull_request.number }}.html


      - name: Upload artifact
        uses: actions/upload-pages-artifact@v1
        with:
          # Upload entire repository
          path: './doc-${{ github.event.pull_request.number }}'
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v1
