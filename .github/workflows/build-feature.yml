name: Code Quality Check Feature

on:
  # to fix comment : Runs on pull request targeting any branch except the default branch main
  pull_request:
    types: [ opened, synchronize, reopened]
  push:
    branches: [ feature/*, feat/*, fix/* ]
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

env:
  FLY_API_TOKEN: ${{ secrets.SPRING_BOOT_ASYNCHRONOUS_API_FLY_API_TOKEN }}

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow one concurrent deployment
concurrency:
  group: "pages"
  cancel-in-progress: true


jobs:
  loading_test:
    name: Loading Test
    environment:
      name: prep-loading-report
      # needs: non_regression_test
    runs-on: ubuntu-latest
    steps:
#      # Checkout the code from the repository
      - name: Checkout
        uses: actions/checkout@v3

      # Execute Gatling Test Suite
      - name: Execute Gatling Test Suite
        continue-on-error: true
        run: |
          mvn clean gatling:test --f loading/pom.xml

      - name: Generate Job Summary
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs')
            const lastRuns = fs.readFileSync(`loading/target/gatling/lastRun.txt`).toString().trim().split('\n');
            
            for(const run of lastRuns) {
                const formattedLine = run.replace(/(.*)-(\d{4})(\d{2})(\d{2})(\d{2})(\d{2})(\d{2})/, ' $1 at $2-$3-$4 $5:$6:$7');
                const results = JSON.parse(fs.readFileSync(`loading/target/gatling/${run}/js/stats.json`).toString());
                let tableContent = [
                    [
                        {data: 'Request', header: true}, 
                        {data: 'Success ✅', header: true}, 
                        {data: 'Errors ❌', header: true}, 
                        {data: 'Min', header: true},
                        {data: 'Max', header: true},
                        {data: 'Avg.', header: true},
                        {data: 'Std. Dev.', header: true},
                        {data: 'RPS', header: true},
                    ]
                ];
            
                for(const result in results.contents) {
                    const requestMetrics = results.contents[result].stats;
                    tableContent.push([
                        requestMetrics.name,
                        requestMetrics.numberOfRequests.ok.toString(),
                        requestMetrics.numberOfRequests.ko.toString(),
                        requestMetrics.minResponseTime.total.toString(),
                        requestMetrics.maxResponseTime.total.toString(),
                        requestMetrics.meanResponseTime.total.toString(),
                        requestMetrics.standardDeviation.total.toString(),
                        requestMetrics.meanNumberOfRequestsPerSecond.total.toString(),
                    ]);
                }
            
                await core.summary
                    .addHeading(`Results for ${formattedLine}`)
                    .addTable(tableContent)
                    .addQuote('All times are in millisecond (ms). RPS means "Requests per Second"')
                    .write()
            }
